import json
import vk_api
import time
import loguru
import datetime
import asyncio

from termcolor import colored

from vkbottle import VKAPIError
from vkbottle.user import User, Message
from vkbottle.api import API
from vkbottle.tools import DocMessagesUploader

from collections import OrderedDict

from config import file_name
from config import file_name2

from from_log.get_chat_name import get_chat_name_log
from from_log.get_user_name import get_user_name_log

from other_text.start_text import message_text

from scripts.dd_script import DD_SCRIPT

from utils.edit_mes import edit_message
from utils.get_id import get_user_id, user_id_get_mes, search_group_ids
from utils.get_stickers import stick
from utils.get_user_name import get_user_name
from utils.get_vk_reg import data_reg

from json_utils.txt_temp import *
from json_utils.audio_temp import audio_messages, save_audio_messages, load_audio_messages
from json_utils.ignore import save_ignored_users, add_ignore, remove_ignore, load_ignored_users
from json_utils.dov import save_dov_users, add_dov, remove_dov, load_dov_users

with open(file_name, "r") as fh:
    token = json.load(fh)

with open(file_name2, "r") as fh:
    prefixes = json.load(fh)

loguru.logger.disable("vkbottle")

user = User(token)
api = API(token)

vk_session = vk_api.VkApi(token=token)
vk = vk_session.get_api()
user_info = vk.users.get()
user_id = user_info[0]['id']
owners = [user_id]

timers = {}
timer_counter = 0

vk.messages.send(user_id=user_id, random_id=0, message=message_text)

@user.on.message(text=[f'{prefix}–æ—á–∏—Å—Ç–∏—Ç—å —à–∞–±—ã' for prefix in prefixes])
async def reset_templates(message: Message):
    if message.from_id not in owners:
        return
    try:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)
    except FileNotFoundError:
        await edit_message(message, "üìù –§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    if not templates:
        await edit_message(message, "üìù –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    num_templates_before = len(templates)
    with open(TEMPLATES_FILE, 'w') as f:
        json.dump({}, f)
    await edit_message(message, f"‚ôª –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {num_templates_before} —à–∞–±–ª–æ–Ω–æ–≤.")

@user.on.message(text=[f'{prefix}—Ö–µ–ª–ø' for prefix in prefixes])
async def dadacmds(message: Message):
    if message.from_id not in owners:
        return
    await edit_message(message, '‚öô –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.\nüìù –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: 4')

@user.on.message(text=[f'{prefix}—Ö–µ–ª–ø 1' for prefix in prefixes])
async def list_cmd(message: Message):
    if message.from_id not in owners:
        return
    text = [
'üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/4.\n\n'

'‚ñπ +|-–∞–¥–º–∏–Ω\n'
'‚ï∞ —Å—Ç–∞–≤–∏—Ç/—É–±–∏—Ä–∞–µ—Ç –∞–¥–º–∏–Ω–∫—É –≤ —á–∞—Ç–µ\n\n'

'‚ñπ –ø–∏–Ω–≥\n'
'‚ï∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n\n'

'‚ñπ +|-–≥–ø (–≥—Ä—É–ø–ø–∞/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –≥—Ä—É–ø–ø—ã\n\n'

'‚ñπ +|-–ª–∞–π–∫ (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ —Å—Ç–∞–≤–∏—Ç/–£–±–∏—Ä–∞–µ—Ç –ª–∞–π–∫ –Ω–∞ –∞–≤—É\n\n'

'‚ñπ –¥–æ–±–∞–≤–∏—Ç—å (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç\n\n'

'‚ñπ –∫–∏–∫ (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –∏—Å–∫–ª—é—á–∞–µ—Ç –∏–∑ —á–∞—Ç–∞\n\n'

'‚ñπ –≤—ã–π—Ç–∏\n'
'‚ï∞ –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç\n\n'

'‚ñπ +|-–¥—Ä (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∏–∑ –¥—Ä—É–∑–µ–π\n\n'

'‚ñπ +|-—á—Å (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —á—Å\n\n'

'‚ñπ –≤–ª—Å (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'[–¢–µ–∫—Å—Ç]\n'
'‚ï∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–º—Å –≤ –¥–∏–∞–ª–æ–≥\n\n'
    ]
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}—Ö–µ–ª–ø 2' for prefix in prefixes])
async def list_cmd(message: Message):
    if message.from_id not in owners:
        return
    text = [
'üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2/4.\n\n'

'‚ñπ +|-–∏–≥–Ω–æ—Ä (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∞\n\n'

'‚ñπ –∏–≥–Ω–æ—Ä—ã\n'
'‚ï∞ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö\n\n'

'‚ñπ +|-–¥–æ–≤ (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö\n\n'

'‚ñπ /—Å–∫–∞–∂–∏ (—Ç–µ–∫—Å—Ç)\n'
'‚ï∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º)\n\n'

'‚ñπ –¥–æ–≤—ã\n'
'‚ï∞ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö\n\n'

'‚ñπ —Ä–µ—à–∏ (–ø—Ä–∏–º–µ—Ä)\n'
'‚ï∞ —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä\n\n'

'‚ñπ –ø–æ–≥–æ–¥–∞ (–≥–æ—Ä–æ–¥)\n'
'‚ï∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n\n'

'‚ñπ –∏–Ω—Ñ–æ\n'
'‚ï∞ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'

'‚ñπ –∏–¥ (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —á–µ–ª–æ–≤–µ–∫–∞\n\n'

'‚ñπ —Ä–µ–≥ (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å–≤–æ—é –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞\n\n'
    ]
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}—Ö–µ–ª–ø 3' for prefix in prefixes])
async def list_cmd(message: Message):
    if message.from_id not in owners:
        return
    text = [
'üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3/4.\n\n'

'‚ñπ +|-—à–∞–± (–∏–º—è)\n'
'[–¢–µ–∫—Å—Ç] (–ø—Ä–∏ +)\n'
'‚ï∞ –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω\n\n'

'‚ñπ ~—à–∞–± (–∏–º—è)\n'
'[–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç]\n'
'‚ï∞ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω\n\n'

'‚ñπ —à–∞–± (–∏–º—è)\n'
'‚ï∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞\n\n'

'‚ñπ —à–∞–±—ã\n'
'‚ï∞ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤\n\n'

'‚ñπ +—Ç–∞–π–º–µ—Ä (–≤—Ä–µ–º—è)\n'
'[—Ç–µ–∫—Å—Ç]\n'
'‚ï∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä\n\n'

'‚ñπ -—Ç–∞–π–º–µ—Ä (–Ω–æ–º–µ—Ä)\n'
'‚ï∞ —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä\n\n'

'‚ñπ —Ç–∞–π–º–µ—Ä—ã\n'
'‚ï∞ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n\n'

'‚ñπ –î–¥ (—á–∏—Å–ª–æ)\n'
'‚ï∞ —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–∏ —Å–º—Å. –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —á–∏—Å–ª–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2\n\n'

'‚ñπ —Å—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç)\n'
'‚ï∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª—å\n\n'

'‚ñπ –æ—á–∏—Å—Ç–∏—Ç—å —à–∞–±—ã\n'
'‚ï∞ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã\n\n'

    ]
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}—Ö–µ–ª–ø 4' for prefix in prefixes])
async def list_cmd(message: Message):
    if message.from_id not in owners:
        return
    text = [
'üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4/4.\n\n'
'‚ñπ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã\n'
'‚ï∞ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã\n\n'

'‚ñπ —Å—Ç–æ–ø\n'
'‚ï∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n\n'

'‚ñπ —Ö–µ–ª–ø (–Ω–æ–º–µ—Ä)\n'
'‚ï∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º\n\n'

'‚ñπ –≥—Ä—É–ø–ø—ã (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Å–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ñ–ª—É–¥–∞)\n\n'

'‚ñπ —Å—Ç–∏–∫–∏ (—á–µ–ª–æ–≤–µ–∫/—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Å–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Ñ–ª—É–¥–∞)\n\n'

'‚ñπ +|-–≥—Å (–∏–º—è) (—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ–≤–æ–π —à–∞–±–ª–æ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º\n\n'

'‚ñπ –≥—Å—ã\n'
'‚ï∞ —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤\n\n'

'‚ñπ –≥—Å (–∏–º—è)\n'
'‚ï∞ —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'

'‚ñπ +—Ä–µ–∞–∫—Ü–∏—è (—Ä–µ–ø–ª–∞–π) (1-16)\n'
'‚ï∞ –ø–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'

'‚ñπ -—Ä–µ–∞–∫—Ü–∏—è (—Ä–µ–ø–ª–∞–π)\n'
'‚ï∞ —É–¥–∞–ª–∏—Ç —Ä–µ–∞–∫—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è'

'‚ñπ –ª–æ–≥–∏\n'
'‚ï∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–∞–π–ª —Å –ª–æ–≥–≥–∞–º–∏'
    ]
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}+–ª–∞–π–∫' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    name = await get_user_name(user_id)
    spisok = []
    uss = await message.ctx_api.request("users.get", {"user_ids": user_id, "fields": "has_photo, photo_id"})
    print(uss)
    ussssss = uss['response'][0]['photo_id']
    spisok.append({
        "item_id": ussssss.split("_")[1],
        "owner_id": ussssss.split("_")[0],
        "access_key": None,
        "type": "photo",
        "name": "–∞–≤—É"
    })
    await message.ctx_api.likes.add(owner_id=int(spisok[0]["owner_id"]), item_id=int(spisok[0]['item_id']),
                                    type='photo')
    await edit_message(message, f"‚úÖ –ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –¥–ª—è {name}.")

@user.on.message(text=[f'{prefix}-–ª–∞–π–∫' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    name = await get_user_name(user_id)
    spisok = []
    uss = await message.ctx_api.request("users.get", {"user_ids": user_id, "fields": "has_photo, photo_id"})
    print(uss)
    ussssss = uss['response'][0]['photo_id']
    spisok.append({
        "item_id": ussssss.split("_")[1],
        "owner_id": ussssss.split("_")[0],
        "access_key": None,
        "type": "photo",
        "name": "–∞–≤—É"
    })
    await message.ctx_api.likes.delete(owner_id=int(spisok[0]["owner_id"]), item_id=int(spisok[0]['item_id']),
                                       type='photo')
    await edit_message(message, f"‚úÖ –£–¥–∞–ª–∏–ª –ª–∞–π–∫ –¥–ª—è {name}.")

@user.on.message(text=[f'{prefix}+–ª–∞–π–∫ <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    name = await get_user_name(user_id)
    spisok = []
    uss = await message.ctx_api.request("users.get", {"user_ids": user_id, "fields": "has_photo, photo_id"})
    print(uss)
    ussssss = uss['response'][0]['photo_id']
    spisok.append({
        "item_id": ussssss.split("_")[1],
        "owner_id": ussssss.split("_")[0],
        "access_key": None,
        "type": "photo",
        "name": "–∞–≤—É"
    })
    await message.ctx_api.likes.add(owner_id=int(spisok[0]["owner_id"]), item_id=int(spisok[0]['item_id']), type='photo')
    await edit_message(message, f"‚úÖ –ü–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –¥–ª—è {name}.")

@user.on.message(text=[f'{prefix}-–ª–∞–π–∫ <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    name = await get_user_name(user_id)
    spisok = []
    uss = await message.ctx_api.request("users.get", {"user_ids": user_id, "fields": "has_photo, photo_id"})
    print(uss)
    ussssss = uss['response'][0]['photo_id']
    spisok.append({
        "item_id": ussssss.split("_")[1],
        "owner_id": ussssss.split("_")[0],
        "access_key": None,
        "type": "photo",
        "name": "–∞–≤—É"
    })
    await message.ctx_api.likes.delete(owner_id=int(spisok[0]["owner_id"]), item_id=int(spisok[0]['item_id']), type='photo')
    await edit_message(message, f"‚úÖ –£–¥–∞–ª–∏–ª –ª–∞–π–∫ –¥–ª—è {name}.")

@user.on.message(text=[f'{prefix}+–≥–ø' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    gp_id = await user_id_get_mes(message)
    group = await message.ctx_api.request('groups.join', {'group_id': abs(gp_id)})
    await edit_message(message, f'‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É')

@user.on.message(text=[f'{prefix}+–≥–ø <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    gp_id = search_group_ids(url)[0]
    group = await message.ctx_api.request('groups.join', {'group_id': abs(gp_id)})
    await edit_message(message, f'‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É')

@user.on.message(text=[f'{prefix}-–≥–ø' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    gp_id = await user_id_get_mes(message)
    group = await message.ctx_api.request('groups.leave', {'group_id': abs(gp_id)})
    await edit_message(message, f'‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É.')

@user.on.message(text=[f'{prefix}-–≥–ø <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    gp_id = search_group_ids(url)[0]
    group = await message.ctx_api.request('groups.leave', {'group_id': abs(gp_id)})
    await edit_message(message, f'‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É.')

@user.on.message(text=[f'{prefix}—Ä–µ–≥' for prefix in prefixes])
async def regg(message: Message):
  if message.from_id not in owners:
        return
  user_id = await user_id_get_mes(message)
  await edit_message(message, data_reg(user_id))

@user.on.message(text=[f'{prefix}—Ä–µ–≥ <link>' for prefix in prefixes])
async def piska(message: Message, link: str):
  if message.from_id not in owners:
        return
  user_id = get_user_id(link)[0]
  await edit_message(message, data_reg(user_id))

@user.on.message(text=[f'{prefix}—Å—Ç–∞—Ç—É—Å <text>' for prefix in prefixes])
async def greeting(message: Message, text: str):
    if message.from_id not in owners:
        return
    await message.ctx_api.status.set(text)
    await edit_message(message, f"‚úÖ –ò–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞: <<{text}>>")

@user.on.message(text=[f'{prefix}–∏–¥' for prefix in prefixes])
async def getid(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    await edit_message(message, f'üÜî [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]: {user_id}')

@user.on.message(text=[f'{prefix}–∏–¥ <link>' for prefix in prefixes])
async def ejdj(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    await edit_message(message, f'üÜî [id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]: {user_id}')

@user.on.message(text=[f'{prefix}–ø–∏–Ω–≥' for prefix in prefixes])
async def ping(message: Message):
    if message.from_id not in owners:
        return
    delta = round(time.time() - message.date, 2)
    text = f'üèì –ü–æ–Ω–≥! –ó–∞–¥–µ—Ä–∂–∫–∞: {delta}—Å.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}+–¥—Ä' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message=message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!")
        return
    await message.ctx_api.friends.add(user_id)
    name = await get_user_name(user_id)
    text = f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}+–¥—Ä <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è!")
        return
    await message.ctx_api.friends.add(user_id)
    name = await get_user_name(user_id)
    text = f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}-–¥—Ä' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message=message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –¥—Ä—É–∑–µ–π!")
        return
    await message.ctx_api.friends.delete(user_id)
    name = await get_user_name(user_id)
    text = f'‚úÖ {name} —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}-–¥—Ä <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –¥—Ä—É–∑–µ–π!")
        return
    await message.ctx_api.friends.delete(user_id)
    name = await get_user_name(user_id)
    text = f'‚úÖ {name} —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π.'
    await edit_message(message, text)

@user.on.message(text=[f'{prefix}–¥–æ–±–∞–≤–∏—Ç—å' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á–∞—Ç!")
            return
        await message.ctx_api.request("messages.addChatUser", {"user_id": user_id,"chat_id": message.peer_id - 2000000000})
        text = '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.'
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}–¥–æ–±–∞–≤–∏—Ç—å <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á–∞—Ç!")
            return
        await message.ctx_api.request("messages.addChatUser", {"user_id": user_id,"chat_id": message.peer_id - 2000000000})
        text = '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.'
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}+–∞–¥–º–∏–Ω' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –∞–¥–º–∏–Ω—ã!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "admin"})
        text = f"‚úÖ [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}+–∞–¥–º–∏–Ω <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ –∞–¥–º–∏–Ω—ã!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "admin"})
        text = f"‚úÖ [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}-–∞–¥–º–∏–Ω' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "member"})
        text = f"‚úÖ –° [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}-–∞–¥–º–∏–Ω <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤!")
            return
        await message.ctx_api.request("messages.setMemberRole",
                                      {"peer_id": message.peer_id, "member_id": user_id, "role": "member"})
        text = f"‚úÖ –° [id{user_id}|–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã.]"
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f"–û—à–∏–±–∫–∞: {ex}")

@user.on.message(text=[f'{prefix}–∫–∏–∫' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    try:
        user_id = await user_id_get_mes(message)
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –∫–∏–∫–∞–π—Ç–µ —Å–µ–±—è!")
            return
        await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id,
                                                                  "chat_id": message.peer_id - 2000000000})
        text = f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω —Å –±–µ—Å–µ–¥—ã."
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}–∫–∏–∫ <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    try:
        user_id = get_user_id(url)[0]
        if user_id == message.from_id:
            await edit_message(message, "‚ùå –ù–µ –∫–∏–∫–∞–π—Ç–µ —Å–µ–±—è!")
            return
        await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id,"chat_id": message.peer_id - 2000000000})
        text = f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω —Å –±–µ—Å–µ–¥—ã."
        await edit_message(message, text)
    except Exception as ex:
        await edit_message(message, f'–û—à–∏–±–∫–∞: {ex}')

@user.on.message(text=[f'{prefix}–≤—ã–π—Ç–∏' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    text = f"‚úÖ –ü–æ–∫–∏–Ω—É–ª –±–µ—Å–µ–¥—É"
    await edit_message(message, text)
    await message.ctx_api.request("messages.removeChatUser", {"member_id": message.from_id,"chat_id": message.peer_id - 2000000000})

@user.on.message(text=[f'{prefix}+—á—Å' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á—Å!")
        return
    name = await get_user_name(user_id)
    await message.ctx_api.account.ban(user_id)
    await edit_message(message, f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°')

@user.on.message(text=[f'{prefix}+—á—Å <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–±—è –≤ —á—Å!")
        return
    name = await get_user_name(user_id)
    await message.ctx_api.account.ban(user_id)
    await edit_message(message, f'‚úÖ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°')

@user.on.message(text=[f'{prefix}-—á—Å' for prefix in prefixes])
async def greeting(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –ß–°!")
        return
    name = await get_user_name(user_id)
    await message.ctx_api.account.unban(user_id)
    await edit_message(message, f'‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°')

@user.on.message(text=[f'{prefix}-—á—Å <url>' for prefix in prefixes])
async def greeting(message: Message, url: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    if user_id == message.from_id:
        await edit_message(message, "‚ùå –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–µ–±—è –∏–∑ –ß–°!")
        return
    name = await get_user_name(user_id)
    await message.ctx_api.account.unban(user_id)
    await edit_message(message, f'‚úÖ {name} —É–¥–∞–ª–µ–Ω –∏–∑ –ß–°')

@user.on.message(text=[f'{prefix}–≤–ª—Å\n<text>' for prefix in prefixes])
async def greeting(message: Message, text: str):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    await message.ctx_api.request("messages.send", {"peer_id": user_id, "message": text, "random_id": 0})
    tt = '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
    await edit_message(message, tt)

@user.on.message(text=[f'{prefix}–≤–ª—Å <url>\n<text>' for prefix in prefixes])
async def greeting(message: Message, url: str, text: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    await message.ctx_api.request("messages.send", {"peer_id": user_id, "message": text, "random_id": 0})
    tt = '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
    await edit_message(message, tt)

@user.on.message(text=[f'{prefix}+—à–∞–± <name>\n<text>' for prefix in prefixes])
async def add_template(message: Message, name: str, text: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)
        templates[name] = text
        with open(TEMPLATES_FILE, 'w') as f:
            json.dump(templates, f)
        await edit_message(message=message, text=f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{name}¬ª —Å–æ–∑–¥–∞–Ω.")

@user.on.message(text=[f'{prefix}-—à–∞–± <name>' for prefix in prefixes])
async def delete_template(message: Message, name: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)
        if name in templates:
            del templates[name]
            with open(TEMPLATES_FILE, 'w') as f:
                json.dump(templates, f)
            await edit_message(message=message, text=f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{name}¬ª —É–¥–∞–ª–µ–Ω.")
        else:
            await edit_message(message=message, text=f"‚ùå –®–∞–±–ª–æ–Ω ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@user.on.message(text=[f'{prefix}~—à–∞–± <name>\n<new_text>' for prefix in prefixes])
async def edit_template(message: Message, name: str, new_text: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)
        if name in templates:
            templates[name] = new_text
            with open(TEMPLATES_FILE, 'w') as f:
                json.dump(templates, f)
            await edit_message(message=message, text=f"‚úÖ –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ ¬´{name}¬ª –∏–∑–º–µ–Ω–µ–Ω.")
        else:
            await edit_message(message=message, text=f"‚ùå –®–∞–±–ª–æ–Ω ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@user.on.message(text=[f'{prefix}—à–∞–±—ã' for prefix in prefixes])
async def list_templates(message: Message):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            template_names = json.load(f, object_pairs_hook=OrderedDict)
        if template_names:
            template_list = "\n".join(f"{i+1}. {name}" for i, name in enumerate(template_names))
            await edit_message(message=message, text=f"üìñ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤:\n{template_list}")
        else:
            await edit_message(message=message, text="üìñ –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç.")

@user.on.message(text=[f'{prefix}—à–∞–± <name>' for prefix in prefixes])
async def use_template(message: Message, name: str):
    if message.from_id not in owners:
        return
    else:
        with open(TEMPLATES_FILE, 'r') as f:
            templates = json.load(f)

        if name in templates:
            template_text = templates[name]
            await edit_message(message=message, text=f"{template_text}")
        else:
            await edit_message(message=message, text=f"‚ùå –®–∞–±–ª–æ–Ω ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@user.on.message(text=[f'{prefix}—Ä–µ—à–∏ <equation>' for prefix in prefixes])
async def solve_equation(message: Message, equation: str):
    if message.from_id not in owners:
        return
    try:
        result = eval(equation)
        await edit_message(message, text=f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        error_message = f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
        await edit_message(message, error_message)

@user.on.message(text=[f'{prefix}+—Ç–∞–π–º–µ—Ä <minutes:int>\n<text>' for prefix in prefixes])
async def set_timer(message: Message, minutes: int, text: str):
    if message.from_id not in owners:
        return
    try:
        global timer_counter
        response = "‚åö –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        await edit_message(message, response)
        timer_counter += 1
        timer_id = timer_counter
        timers[timer_id] = {
            'minutes': minutes,
            'text': text,
            'user_id': message.from_id,
            'start_time': datetime.datetime.now()
        }

        await asyncio.sleep(minutes * 60)
        if timer_id in timers:
            await message.answer(text)
            timers.pop(timer_id)
        for idx, timer_info in list(timers.items()):
            if idx > timer_id:
                timers[idx - 1] = timers.pop(idx)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}")

@user.on.message(text=[f'{prefix}–æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã' for prefix in prefixes])
async def clear_timers(message: Message):
    if message.from_id not in owners:
        return
    global timers
    if not timers:
        await edit_message(message, "üìù –°–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—É—Å—Ç.")
    else:
        timers = {}
        await edit_message(message, "‚úÖ –°–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")

@user.on.message(text=[f'{prefix}—Ç–∞–π–º–µ—Ä—ã' for prefix in prefixes])
async def list_timers(message: Message):
    if not timers:
        await edit_message(message, text="‚åö –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")
        return
    response = "‚åö –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤:\n"
    for timer_id, timer_info in timers.items():
        response += f"{timer_id}. {timer_info['text']} -> {timer_info['minutes']} –º–∏–Ω—É—Ç–æ–∫\n"
    await edit_message(message, response)

@user.on.message(text=[f'{prefix}-—Ç–∞–π–º–µ—Ä <timer_id:int>' for prefix in prefixes])
async def remove_timer(message: Message, timer_id: int):
    if message.from_id not in owners:
        return
    global timers, timer_counter
    if timer_id in timers:
        timers.pop(timer_id)
        await edit_message(message, text=f"‚úÖ –¢–∞–π–º–µ—Ä —Å ID ¬´{timer_id}¬ª —É–¥–∞–ª–µ–Ω.")
    else:
        await edit_message(message, text=f"‚ùå –¢–∞–π–º–µ—Ä —Å ID ¬´{timer_id}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    for idx, timer_info in timers.items():
        if idx > timer_id:
            timers[idx - 1] = timers.pop(idx)
    if not timers:
        timer_counter = 0

@user.on.message(text=['/—Å–∫–∞–∂–∏ <text>', '/–°–∫–∞–∂–∏ <text>'])
async def dovtext(message: Message, text: str):
    dov_users = load_dov_users()
    if message.from_id in dov_users:
        await message.answer(f'{text}')

@user.on.message(text=[f'{prefix}–∏–Ω—Ñ–æ' for prefix in prefixes])
async def infolp(message: Message):
    if message.from_id not in owners:
        return
    user_id = message.from_id
    name = await get_user_name(user_id)
    dov = load_dov_users()
    dov_count = len(dov)
    ignored_users = load_ignored_users()
    ignored_count = len(ignored_users)
    timer_count = len(timers)
    with open(TEMPLATES_FILE, 'r') as f:
        templates = json.load(f)
    templates_count = len(templates)
    if prefixes:
        prefixes_list = ", ".join(prefixes)
        prefixes_info = f"üìñ –ü—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–º–∞–Ω–¥: {prefixes_list}\n"
    else:
      prefixes_info = "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤\n"
    text = [
        f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}\n'
        f'‚öô –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ–≤—Ç–æ—Ä—è–ª–∫–∏: /—Å–∫–∞–∂–∏\n'
        f'‚öô –ü—Ä–µ—Ñ–∏–∫—Å —É–¥–∞–ª—è–ª–∫–∏: –î–¥\n'
        f'üìò –¢–∞–π–º–µ—Ä–æ–≤: {timer_count}\n'
        f'üìò –î–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö: {dov_count}\n'
        f'üìò –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö: {ignored_count}\n'
        f'üìò –®–∞–±–ª–æ–Ω–æ–≤: {templates_count}\n'
        f'{prefixes_info}'
    ]
    await edit_message(message, text)

@user.on.message(text=['–¥–¥', '–î–¥ <count:int>', '–î–¥', '–¥–¥ <count:int>'])
async def greeting(message: Message, count: int = 2):
    if message.from_id not in owners:
        return
    ct = count + 1
    await message.ctx_api.execute(DD_SCRIPT % (ct,message.peer_id,message.from_id,int(datetime.datetime.now().timestamp())))

@user.on.message(text=[f'{prefix}–≥—Ä—É–ø–ø—ã' for prefix in prefixes])
async def groups(message: Message):
    if message.from_id in owners:
        try:
            user_id = await user_id_get_mes(message)
            groups = await api.groups.get(user_id=user_id)
            group_ids = groups.items
            group_list = ""
            for index, group_id in enumerate(group_ids, start=1):
                group_info_list = await api.groups.get_by_id(group_id)
                if group_info_list:
                    group_info = group_info_list[0]
                    group_list += f"{index}. [club{group_info.id}|{group_info.name}]\n"
        except VKAPIError[30]:
            await edit_message(message, text='‚ö† –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è.')
            return
        await edit_message(message, text=f'{group_list}')

@user.on.message(text=[f'{prefix}–≥—Ä—É–ø–ø—ã <link>' for prefix in prefixes])
async def groups(message: Message, link: str):
    if message.from_id in owners:
        try:
            user_id = get_user_id(link)[0]
            groups = await api.groups.get(user_id=user_id)
            group_ids = groups.items
            group_list = ""
            for index, group_id in enumerate(group_ids, start=1):
                group_info_list = await api.groups.get_by_id(group_id)
                if group_info_list:
                    group_info = group_info_list[0]
                    group_list += f"{index}. [club{group_info.id}|{group_info.name}]\n"
        except VKAPIError[30]:
            await edit_message(message, text='‚ö† –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è.')
            return
        await edit_message(message, text=f'{group_list}')

@user.on.message(text=[f'{prefix}+–∏–≥–Ω–æ—Ä' for prefix in prefixes])
async def idsfdsgvds_add(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    username = await get_user_name(user_id)
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    ignored_users = load_ignored_users()
    if user_id in ignored_users:
        await edit_message(message, f'‚ö† {username} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ.')
        return
    await edit_message(message, f'‚úÖ {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç.')
    add_ignore(user_id)

@user.on.message(text=[f'{prefix}-–∏–≥–Ω–æ—Ä' for prefix in prefixes])
async def iqwedfv_remove(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    username = await get_user_name(user_id)
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    ignored_users = load_ignored_users()
    if user_id not in ignored_users:
        await edit_message(message, f'‚ö† {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ.')
        return
    await edit_message(message, f'‚úÖ {username} —É–¥–∞–ª—ë–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞.')
    remove_ignore(user_id)

@user.on.message(text=[f'{prefix}+–∏–≥–Ω–æ—Ä <link>' for prefix in prefixes])
async def iwd3df_add(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    username = await get_user_name(user_id)
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    ignored_users = load_ignored_users()
    if user_id in ignored_users:
        await edit_message(message, f'‚ö† {username} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ.')
        return
    await edit_message(message, f'‚úÖ {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç.')
    add_ignore(user_id)

@user.on.message(text=[f'{prefix}-–∏–≥–Ω–æ—Ä <link>' for prefix in prefixes])
async def idgfdg_remove(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    username = await get_user_name(user_id)
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    ignored_users = load_ignored_users()
    if user_id not in ignored_users:
        await edit_message(message, f'‚ö† {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ.')
        return
    await edit_message(message, f'‚úÖ {username} —É–¥–∞–ª—ë–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞.')
    remove_ignore(user_id)

@user.on.message(text=[f'{prefix}+–¥–æ–≤' for prefix in prefixes])
async def idov_add(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    username = await get_user_name(user_id)
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    dov_users = load_dov_users()
    if user_id in dov_users:
        await edit_message(message, f'‚ö† {username} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.')
        return
    await edit_message(message, f'‚úÖ {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ.')
    add_dov(user_id)

@user.on.message(text=[f'{prefix}-–¥–æ–≤' for prefix in prefixes])
async def idovdfd_remove(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    dov_users = load_dov_users()
    username = await get_user_name(user_id)
    if user_id not in dov_users:
        await edit_message(message, f'‚ö† {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.')
        return
    await edit_message(message, f'‚úÖ {username} —É–¥–∞–ª—ë–Ω –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.')
    remove_dov(user_id)

@user.on.message(text=[f'{prefix}+–¥–æ–≤ <link>' for prefix in prefixes])
async def iddd_add(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    username = await get_user_name(user_id)
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    dov_users = load_dov_users()
    if user_id in dov_users:
        await edit_message(message, f'‚ö† {username} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.')
        return
    await edit_message(message, f'‚úÖ {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ.')
    add_dov(user_id)

@user.on.message(text=[f'{prefix}-–¥–æ–≤ <link>' for prefix in prefixes])
async def isdsds_remove(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    if message.from_id == user_id:
        await edit_message(message, '‚ö† –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
        return
    dov_users = load_dov_users()
    username = await get_user_name(user_id)
    if user_id not in dov_users:
        await edit_message(message, f'‚ö† {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.')
        return
    await edit_message(message, f'‚úÖ {username} —É–¥–∞–ª—ë–Ω –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö.')
    remove_dov(user_id)

@user.on.message(text=[f'{prefix}–∏–≥–Ω–æ—Ä—ã' for prefix in prefixes])
async def ignorspis(message: Message):
    if message.from_id not in owners:
        return
    ignored_users = load_ignored_users()
    users_list = ""
    for i, user_id in enumerate(ignored_users, 1):
        username = await get_user_name(user_id)
        users_list += f"{i}. {username}\n"
    await edit_message(message, users_list)

@user.on.message(text=[f'{prefix}–¥–æ–≤—ã' for prefix in prefixes])
async def dovsspis(message: Message):
    if message.from_id not in owners:
        return
    dov_users = load_dov_users()
    users_list = ""
    for i, user_id in enumerate(dov_users, 1):
        username = await get_user_name(user_id)
        users_list += f"{i}. {username}\n"
    await edit_message(message, users_list)

@user.on.message(text=[f'{prefix}—Å—Ç–∏–∫–∏ <link>' for prefix in prefixes])
async def handle_stickers(message: Message, link: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(link)[0]
    access_token = token
    response_message = await stick(user_id, access_token)
    await edit_message(message, f"{response_message}")

@user.on.message(text=[f'{prefix}—Å—Ç–∏–∫–∏' for prefix in prefixes])
async def handle_stickers(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    access_token = token
    response_message = await stick(user_id, access_token)
    await edit_message(message, f"{response_message}")

@user.on.message(text=[f'{prefix}+–≥—Å <name>' for prefix in prefixes])
async def gs(e: Message, name: str):
    if e.from_id not in owners:
        return
    if len(name)>20:
        await edit_message(e, '‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è 20 —Å–∏–º–≤–æ–ª–æ–≤.')
        return
    load_audio_messages()
    if name in audio_messages:
        await edit_message(e, f'‚ö† –ì–æ–ª–æ—Å–æ–≤–æ–π —à–∞–±–ª–æ–Ω <<{name}>> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return
    payload = e.reply_message.text if e.reply_message else None
    attachments = e.reply_message.attachments if e.reply_message else e.attachments
    if not payload and not attachments:
        await edit_message(e, text='‚ö† –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ')
        return
    audio_links = []
    for att in attachments:
        if att.audio_message is not None:
            if att.audio_message.access_key is None:
                audio_links.append(f'audio_message{att.audio_message.owner_id}_{att.audio_message.id}')
            else:
                audio_links.append(f'audio_message{att.audio_message.owner_id}_{att.audio_message.id}_{att.audio_message.access_key}')

    audio_messages[name] = audio_links
    save_audio_messages()
    await edit_message(e, f'‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —à–∞–±–ª–æ–Ω <<{name}>> —Å–æ–∑–¥–∞–Ω.')

@user.on.message(text=[f'{prefix}–≥—Å <name>' for prefix in prefixes])
async def send_gs(e: Message, name: str):
    if e.from_id not in owners:
        return
    load_audio_messages()
    if name in audio_messages:
        for audio_link in audio_messages[name]:
            await e.ctx_api.execute(DD_SCRIPT % (1,e.peer_id,e.from_id,int(datetime.datetime.now().timestamp())))
            await e.answer(attachment=audio_link)
    else:
        await edit_message(e, '‚ö† –¢–∞–∫–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

@user.on.message(text=[f'{prefix}–≥—Å—ã' for prefix in prefixes])
async def list_templates(e: Message):
    load_audio_messages()
    if not audio_messages:
        await edit_message(e, "‚ö† –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç.")
        return
    templates_list = "\n".join([f"{index + 1}. {template}" for index, template in enumerate(audio_messages.keys())])
    await edit_message(e, f"üìñ –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:\n{templates_list}")

@user.on.message(text=[f'{prefix}-–≥—Å <name>' for prefix in prefixes])
async def delete_template(e: Message, name: str):
    if e.from_id not in owners:
        return
    load_audio_messages()
    if name in audio_messages:
        del audio_messages[name]
        save_audio_messages()
        await edit_message(e, f'‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —à–∞–±–ª–æ–Ω <<{name}>> —É–¥–∞–ª–µ–Ω.')
    else:
        await edit_message(e, f'‚ö† –ì–æ–ª–æ—Å–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ <<{name}>> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

@user.on.message(text=[f'{prefix}+—Ä–µ–∞–∫—Ü–∏—è <reaction_id:int>' for prefix in prefixes])
async def send_rec(message: Message, reaction_id: int):
    if message.from_id not in owners:
        return
    if reaction_id > 16:
        await edit_message(message, '‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <<reaction_id>>: 16.')
        return
    await message.ctx_api.request(
        "messages.sendReaction",
        {
            "peer_id": message.peer_id,
            "cmid": message.reply_message.conversation_message_id if message.reply_message else message.conversation_message_id,
            "reaction_id": reaction_id
        }
    )
    await edit_message(message, '‚úÖ –†–µ–∞–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

@user.on.message(text=[f'{prefix}-—Ä–µ–∞–∫—Ü–∏—è' for prefix in prefixes])
async def delete_rec(message: Message):
    if message.from_id not in owners:
        return
    await message.ctx_api.request(
        "messages.deleteReaction",
        {
            "peer_id": message.peer_id,
            "cmid": message.reply_message.conversation_message_id
        }
    )

    await edit_message(message, '‚úÖ –†–µ–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.')

doc_uploader = DocMessagesUploader(user.api)

@user.on.message(text=[f'{prefix}–ª–æ–≥–∏' for prefix in prefixes])
async def setlogs(message: Message):
    if message.from_id not in owners:
        return
    doc = await doc_uploader.upload(
        title=f'logs.txt',
        file_source='logs.txt',
        peer_id=message.peer_id,
    )
    await user.api.messages.send(user_id=message.from_id, random_id=0, attachment=doc)
    with open('logs.txt', 'w'):
        pass
    await edit_message(message, '‚úÖ –§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ —Å–µ–±–µ –≤ –ª—Å. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.')

@user.on.message()
async def log_message(message: Message):
    ignored_users = load_ignored_users()
    current_time = time.strftime("%H:%M:%S", time.localtime())
    text = message.text.replace('\n', ' ') if message.text else ""
    if not text:
        if message.attachments:
            attachment_type = message.attachments[0].type.value
            replacer = {
                'audio_message': '‚Ä¢ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                'audio': '‚Ä¢ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å',
                'sticker': '‚Ä¢ —Å—Ç–∏–∫–µ—Ä',
                'photo': '‚Ä¢ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
                'video': '‚Ä¢ –≤–∏–¥–µ–æ',
                'doc': '‚Ä¢ –¥–æ–∫—É–º–µ–Ω—Ç',
                'graffiti': '‚Ä¢ –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏',
                'link': '‚Ä¢ —Å—Å—ã–ª–∫–∞'
            }
            text = replacer.get(attachment_type, attachment_type)
        else:
            text = "‚Ä¢ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

    prep_time = colored(f"[{current_time}]", 'blue')
    prep_time2 = f"[{current_time}]"

    mark = ''

    user_ask = colored(await get_user_name_log(message.from_id), 'red')
    user_ask2 = await get_user_name_log(message.from_id)

    prep_text = ": " + colored(text, 'cyan')
    prep_text2 = ": " + text

    if message.peer_id > 2000000000:
        conversation = colored(await get_chat_name_log(message.peer_id), 'green')
        conversation2 = await get_chat_name_log(message.peer_id)

    else:
        conversation = colored(await get_user_name_log(message.peer_id), 'green')
        conversation2 = await get_user_name_log(message.peer_id)

        mark = "[–õ–°]"

    info_conversation = f"[{conversation}/{user_ask}]{prep_text}"
    info_conversation2 = f"[{conversation2}/{user_ask2}]{prep_text2}"

    print(prep_time, mark, info_conversation)

    with open('logs.txt', 'a', encoding='utf-8') as file:
        file.write(prep_time2 + mark + info_conversation2 + '\n')

    if message.from_id in ignored_users:
        await user.api.messages.delete(message_ids=message.id)

user.run_forever()